HASH
	散列表（Hash table，也叫哈希表），是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。
哈希(Hash) 函数。 key--f--location      (==散列函数 )
	给定表M，存在函数f(key)==address，对任意给定的关键字值key，代入函数后若能得到**包含该关键字的记录在表中的地址**，则称表M为哈希(Hash）表，函数f(key)为哈希(Hash) 函数。 
	若关键字为k，则其值存放在f(k)==的存储位置上。由此，不需比较便可直接取得所查记录。称这个对应关系f为散列函数，按这个思想建立的表为散列表。
散列表(==哈希表)
	对不同的关键字可能得到同一散列地址，即k1≠k2，而f(k1)=f(k2)，这种现象称为碰撞（英语：Collision）。具有相同函数值的关键字对该散列函数来说称做同义词。综上所述，根据散列函数f(k)和处理碰撞的方法将一组关键字映射到一个有限的连续的地址集（区间）上，并以关键字在地址集中的“像”作为记录在表中的存储位置，这种表便称为散列表，这一映射过程称为散列造表或散列，所得的存储位置称散列地址。

1哈希表的概念及作用
2哈希表的构造方法
2.1直接定址法
2.2数字分析法
2.3平方取中法
2.4折叠法
2.5除留余数法
2.6随机数法
3冲突
3.1拉链法
3.2多哈希法
3.3开放地址法
3.4建域法
Hashtable 的加载因子确定元素与Hashtable 可拥有的元素数的最大比率。加载因子越小，平均查找速度越快，但消耗的内存也增加。默认的加载因子 0.72通常提供速度和大小之间的最佳平衡。当创建 Hashtable 时，也可以指定其他加载因子。
	
元素总量/ Hashtable 可拥有的元素数=加载因子 

当向 Hashtable 添加元素时，Hashtable 的实际加载因子将增加。当实际加载因子达到指定的加载因子时，Hashtable 中存储桶的数目自动增加到大于当前 Hashtable 存储桶数两倍的最小素数。

扩容时所有的数据需要重新进行散列计算。虽然Hash具有O(1)的数据检索效率，但它空间开销却通常很大，是以空间换取时间。所以Hashtable适用于读取操作频繁，写入操作很少的操作类型。


常见功能
在哈希表中添加一个key/键值对：HashtableObject.Add(key,);
在哈希表中去除某个key/键值对：HashtableObject.Remove(key);
从哈希表中移除所有元素： HashtableObject.Clear();
判断哈希表是否包含特定键key： HashtableObject.Contains(key);
在JAVA中使用put方法
如：
Hashtable<String, Integer> numbers= new Hashtable<String, Integer>();
numbers.put("one", 1);
Integer n = (Integer)numbers.get("one");

DIFF
.第一个不同主要是历史原因.Hashtable是基于陈旧的Dictionary类的,HashMap是Java 1.2引进的Map接口的一个实现
第三点不同是,只有HashMap可以让你将空值作为一个表的条目的key或value
　　也许最重要的不同是Hashtable的方法是同步的,而HashMap的方法不是??